

	-------------Microservice Architecture ----------
	=================================================
	
- Building small small services is called microservices 
- Indepedently deployable 
- Each application can be tested differently
- code change in one service doestn't need an entire application testing 
- Scalable and independently deployable when the load increases 
- Auto Scaling -(suppose i have one service which is getting more and more request so we can create another instance of it and deploy it into server 



Load Balancer -:
will do when the request will to server it will route the request to multiple server , in rush time instead of giving heavy load to one service , we can create multi deployment of 
that service and give the acess to load balancer to send the request according to the requirement 

RestTemplate -
==============
we need to communicate from 1 service to another service , for that rest call is needed so we use resttemplate 

ModelMapper --
============
ModelMapper is 3rd party Api so spring IOC won't create bean , so we have to take care of it 

MicroService Communication ---
===================================

RestTemplate - why not to use it ? Synchronous call , blocking call (Thread will be blocked , it won't go to the next thread utill get response )

Blocking of thread ---
Suppose you are making one request to a service and that service is also depend upone another service response so what happen there a service/ application
have some number of threads now consider our application is having 3 threads and 3 threads are occupied if the 4 no people will make a request he can't 
get response immediately because those 3 request have to complete first then only those 3 threads will available so that 4 request will go after that 

Asynchronous call -- (web flux) / there is no thread block , if you are making call it won't wait for response , if any request come that time it 
will take that request 

Dynamic Port --
=================
server.port=0


Interview Question ---
===========================================
If one service making call to 2nd service and 2nd service taking very much time in response how can you solve this ?
ANS--
Timeouts:  Set appropriate timeout values for the HTTP client in Service A to avoid waiting indefinitely for a response from Service B.
Circuit Breakers:  Use a circuit breaker pattern to prevent Service A from making calls to Service B when Service B is experiencing high latency or is down.

Resilience4j is a popular library for implementing circuit breakers and other resilience patterns in Java.

Combining these strategies, you can enhance the resilience and performance of your microservices:
1. Timeouts to prevent long waits.
2. Circuit Breakers to handle downstream failures gracefully.
3. Asynchronous Calls to avoid blocking.
4. Caching to reduce load and improve response times.
5. Bulkheads to isolate resources and limit concurrent calls.
6. Retries to handle transient errors.


Feign Client --
=======================
Feign is a netflix product , used by netflix to make rest calls 
netflix used to for there internal development now they make it open source 
