


	-------------Microservice Architecture ----------
	=================================================
	
- Building small small services is called microservices 
- Indepedently deployable 
- Each application can be tested differently
- code change in one service doestn't need an entire application testing 
- Scalable and independently deployable when the load increases 
- Auto Scaling -(suppose i have one service which is getting more and more request so we can create another instance of it and deploy it into server 



Load Balancer -:
will do when the request will to server it will route the request to multiple server , in rush time instead of giving heavy load to one service , we can create multi deployment of 
that service and give the acess to load balancer to send the request according to the requirement 

RestTemplate -
==============
we need to communicate from 1 service to another service , for that rest call is needed so we use resttemplate 

ModelMapper --
============
ModelMapper is 3rd party Api so spring IOC won't create bean , so we have to take care of it 

MicroService Communication ---
===================================

RestTemplate - why not to use it ? Synchronous call , blocking call (Thread will be blocked , it won't go to the next thread utill get response )

Blocking of thread ---
Suppose you are making one request to a service and that service is also depend upone another service response so what happen there a service/ application
have some number of threads now consider our application is having 3 threads and 3 threads are occupied if the 4 no people will make a request he can't 
get response immediately because those 3 request have to complete first then only those 3 threads will available so that 4 request will go after that 

Asynchronous call -- (web flux) / there is no thread block , if you are making call it won't wait for response , if any request come that time it 
will take that request 

Dynamic Port --
=================
server.port=0


Interview Question ---
===========================================
If one service making call to 2nd service and 2nd service taking very much time in response how can you solve this ?
ANS--
Timeouts:  Set appropriate timeout values for the HTTP client in Service A to avoid waiting indefinitely for a response from Service B.
Circuit Breakers:  Use a circuit breaker pattern to prevent Service A from making calls to Service B when Service B is experiencing high latency or is down.

Resilience4j is a popular library for implementing circuit breakers and other resilience patterns in Java.

Combining these strategies, you can enhance the resilience and performance of your microservices:
1. Timeouts to prevent long waits.
2. Circuit Breakers to handle downstream failures gracefully.
3. Asynchronous Calls to avoid blocking.
4. Caching to reduce load and improve response times.
5. Bulkheads to isolate resources and limit concurrent calls.
6. Retries to handle transient errors.


Feign Client --
=======================
Feign is a netflix product , used by netflix to make rest calls 
netflix used to for there internal development now they make it open source 

Add open fiegn starter in POM - 1st step 

create an Interface write method inside of it and do proper mapping and also anotate that ineterface  with @feignClient (give value or name , uri path )

@EnableFiegnClient - it will Scan your feignclients and generate an implemantation during run time  / create a proxy means spring will take care of 
implemantation class of that feign Interface 


Load Balancer ---------------  = Api Available ===== springcloud starter load balancer 
=======================================
Problem Statement 
-----------------------------
i have 2 service one is employee-service and another one is address-service , scale up the and created address-service 2 instance of it and deployed also
what i want - when employee service is calling address service , it should call it in load balance way , it should make call address service which deployed 
on 8081 , it should call the copy deployed on 8082
Solution ---
Then here the load balancer came to market , sometime i will request the address-service which deployed 8081 and sometime to 8082
here client is employee-service will call address-service server in load balanced way 
---- Spring cloud Load Balancer ------ / Ribbon (netflix) - spring removed ribbon in 2020 
  
  
Problem --
when you list out of server in application.properties file , but you can't hardcode the ip and port (server info) here as it changes
dynamically in a distributed enviorment 

calling from employee-service to address-service and we scaled up the address-service and deployed differnt differnt host and port number and done hardcode configuration
later time we don't want all the address-service we only want 1 address-service when we are calling it throw some exception like server doesn't exist 
  
if one server wants to communicate with another then they need what is ip and port that server 

@LoadBalanced -----
==========================
When we are doing load balancing using rest template we can annotate this annotation above the bean configuration of rest template , this job is pick the instance
from discovery server and do load balancing 

  
Discovery Service ----   Api Available === Springcloud starter eureka client 
==============================
which holds all the services host and port number all the services registered in discovery server in map / list form 
when serviceA wants to make a call to serviceB , serviceA will call the load balancer will do a query to dicovery server to find instance then dispatch to request 
	serviceB (Server Side discovey )
	
(Client Side Load Balancing )--- serviceA calling to serviceB so first call to dicovery server get all details of serviceB , now serviceA call serviceB
serviceB is having n number of instance and it knows which service can take load , serviceA only do load balancing , pickup the server and dispatch the request 
so here serviceA is the client and doing load balancing this called client side load balancing ------------(Netflix eureka ) / under spring cloud 

if again will do the call from A to B service then it won't go to discovery server , because in A service cached it is present and it will dispatch the request and 
will also do load balancing 

Eureka Server maintain data in registry  and registry look like (key , instancelist) like (service A , localhost:8080/address localhost:8081/address)

Problem Statement with Eureka Discvoery Server -------------------
========================================================================
Suppose we have deployed our application and the discovey server have all the information of all the services but this eureka service is down for reason ?
Ans - we can deploye our application like how thses AWS people do like region and zone , same thing we can do scale up our eureka discovery server 
       that is we called eurkea dicovery service cluster  and main thing is that - they can also sync up with each and others , if one  discovery service is down 
	   then he can take data from another 

How to create and configure dicovery server--------?
=====================================================
create a springboot project add eureka discovery server depedency over there 
And in main file annotate with @eureka @EnableEurekaServer
Then we have to tell eureka server as you are the only serveice which is running by configuring in application . properties file 
server.port = 8761 (given by eureka people but we can change it )
and  also the dependency we added that depedency internal also use eureka client so we have to make it false by configring application . properties 

eureka.client .fetch-registry = false   ---/// By writing this you are telling to dicovery service u don't need fetch any registry from another discovey service 
you are only here 

eureka.client.register-with-eureka = flase ---// by writting this you are saying you don't need to register your self in dicovery register service 	

Building Eureka Client ----	add spring-cloud -starter -netflix-eureka -client depedency //when you add this depedency ,the spring cloud load balancer has been
pulled as transitive depedency which is doing load balancing internally 	

if your discovery server is not running port number 8761 , then those who are client to discovery server you have to configure them by using this properties 
eureka.client.service-url.defaultZone=http://localhost:5000/eureka              // if you have multiple zone you can configure in defaultzone 	

--eureka client sends a heart beat in every 30 seconds to eureka server // if want to change default time eureka.instance.lease-renewal-interval-in-seconds=10 
--eureka server remove the instance if it didn't receive any update for 90 seconds 	

Delta Fetch -
====================
localhost:8761/eureka/apps/delta - when we hit this end point we will get recently added instances , not all the instances which are already on chache 

Conclusion ----------------------
=====================================================
don't mix up load balancer with discovery service 
Load Balancer job is do load balancing 
service discovery job is to do discovering service info 
when we build microservices call another microservices we need service discovery to find host and ip info ,
if multiple hosts are available then the load balancer helps to pick one and make call in a load balance way 	


Actuator -----------
=====================================
Depedency - springboot actuator // adding this dependency we can check the health and monitor the application 
it check the health of application and monitor our application 
how to check - add properties on application.propeties file 
management.endpoints.web.exposure.include=*

Random LoadBalancer --
==============================
By default spring cloud load balancer give round robbin way 
we can change it by Refarctor load balancer 



Api Gateway---------------
======================================
An API Gateway is a central component in system design that helps manage and optimize the communication between clients and backend services. 
It simplifies client interactions, enhances security, and provides various features for controlling and monitoring API traffic,
making it an essential part of modern distributed systems and microservices architectures.

Fault tolerance ---
==================
When we build a microservices architecture, there are a large number of small microservices, and they all need to communicate with one another.
Let us consider there are 5 microservices 
and microservices 2 is down at some point of time 
All the other microservices are directly or indirectly dependent on it, so they all go down as well.
The solution to this problem is to have a fallback in case a microservice fails. This aspect of a microservice is called fault tolerance

Fault Tolerance can be achive by the help of circuit braker 

Circuit breaker ----
======================================
There 3 states of circuit breaker 
open , close , half open 

one service is able to call another service then the circuit is close 
if one service calling another service and did not get response from that service and called it till thresold time then it goes to open state 
after 5 sec it goes to half open , if it get more than thresold time response then it take close state , if get less thresold time then it go to open state 

Resilience4j library will use to develop circuitbreaker  